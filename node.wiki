#Node读书笔记

###Node不适合做什么

> 无论是用什么语言,所能改变的仅仅是开发的实施程度和方便程度,而最终软件的好坏所能告便的范围相当有限.

> 任何试图以限制程序员犯错来提高元件质量的方式最终都已经失败告终.真正优秀的软件是依靠优秀的程序员开发出来的.优秀的语言,平台,工具只有在优秀的程序员手中才能显现出它的威力.
> [Node开发指南6.4](file:///users/Yun/Documents/book/fe/js/node开发指南.pdf)

#####计算密集型的程序
不支持多线程(至少是0.8之前的版本).
新版本使用多进程这个问题得到了一定解决.

#####单用户多任务应用.
服务器变成很适合,但不适合单用户的本机应用,毕竟是多进程,不能像多线程一样完全共享内存信息,进程之间的通信不便.

#####逻辑十分复杂的任务
Node使用非线性控制流,而人脑的思维是线性的.
> 举例来说,你要实现一个这样的逻辑:从银行取钱,拿钱去购买某个虚拟商品,买完以后加入库存数据库,这中间的任何一步都可能会涉及数十次的I/O操作,而且任何一次操作失败以后都要进行回滚操作。这个过程是线性的,已经很复杂了,如果要拆分为非线性的逻辑,那么其复杂程度很可能就达到无法维护的地步了。
> [Node开发指南6.4](file:///users/Yun/Documents/book/fe/js/node开发指南.pdf)

Node更善于处理那些逻辑简单但是访问频繁的任务,而不是逻辑十分复杂的工作.

##### Unicode与国际化
由于JS引擎的历史遗留问题,到现在还不能在String级别支持完整的Unicode,处处使用二进制的Buffer还是有些不方便的.


====================================================================
###Node核心模块
#####全局对象,全局变量
在浏览器中就是window,在Node中这个对象是global.

全局变量就是这个对象的属性.如console,process.

global最近本的作用是作为全局变量的宿主,按照ECMAScript定义,满足以下条件的就是全局变量.

* 在最外层定义的变量
* 全局对象的属性
* 隐式定义的变量

在Node中你不可能在最外层定义变量,因为所有用户代码都是属于当前模块的,而模块本身并不是最外层的上下文.(前提是使用var,不然引入模块的全局就会被污染)

######process

`process`是一个全局变量,表示当前Node进程状态,提供与操作系统的简单接口.

`process.argv`是命令行参数数组,第一个元素是node,第二个是脚本名称,第三个开始就是运行参数.

`process.stdout`是标准输出流,通常我们使用`console.log`,`process.stdout.write()`提供了更加底层的接口.

`process.stdin`是标准输入流,初始时他是被暂停的,需要先恢复,并手动编写流时间的响应函数.

    process,stdin.resume();

    process.stdin.on('data',function(data){
      process.stdout.write('read from console: ' + data.toString());
    });

