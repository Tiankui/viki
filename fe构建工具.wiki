
#FE构建工具总结

BPIT [[周伟平]]

## 前言
众所周知,`编译原理`,`算法`,`数据结构`.衍生了所有能看到程序员发展方向.

当看到其他程序员们埋头苦干,随着时间实际经验和以上三项不断提升,向着架构师,项目经理(`project manager`),甚至是爬虫,JVM引擎,数据挖掘,机器学习等明确方向发展时.不免有些心酸.

以往的FE们只能苦叹一声,`男怕入错行~`然后看看jQuery插件文档,写写样式,改改插件,继续苦逼兮兮的做着一些B(`Browser`)活儿.

忙里偷闲的时间看看书,追忆一下童年,尽量在心理自我安慰一下,`还好,我也在进步...`.

    setInterval(function(){
      console.log('无奈');
    },1)

`nodejs`的出现就像一个信号,(其实和传统前端毫无关系,不是基于Browser的活),很多`FE`,`RD`终于发现了机会,(`说句实话,其他程序员不屑于这玩意,人家方向明确着哪`),就像陈胜吴广起义一样,国内外的这群一直饱受项目压迫的FE或者转行的RD们开始向相关方向研究.

不管你愿不愿意,这个时代来临了,如果你还是只知道

* `埃里克梅耶`(css大牛,现在主控compass,基于ruby社区sass的css组件库)
* `道格拉斯.克劳福德`(蝴蝶书作者)
* `zkz`(雅虎那个一版一版总是写`<javascript高级程序设计>`的家伙)

那只能说你稍微有点跟不上这个时代了.

前端构建和预编译世界现在真可谓是异彩纷呈,经过几年的发展,FE们开始探索新的发展路线,`nodejs`,`ES6`,`AMD规范`,`nodejs`,`css预编译解析器`,`js预编译解释器`等等,不胜枚举.

对于BPIT我们这样的情况,一般是没有什么固定产品库的积累的,新项目不断,每次新建项目都得死一回.前端构建工具就变得更为重要.

(其实我们更像接私活的,一个个私活不断,甚至无需考虑这活交出去之后好不好维护,反正接下来还有一堆一堆的活,再见这个项目说不定是猴年马月的事了.)
此次讨论的是编译原理类的工具,以及后端框架.

## 前端编译的依赖和产物

* nodejs(不用说了吧)
* coffeejs(javascript的语法糖,需要预编译.语法借鉴python,ruby)
* uglifyjs(目前最成功的js压缩器)
* express(相比起的原作原作sinatra,具有一定的构建能力,像rails看齐)
* grunt(目前最成功的前端构建平台,插件众多)
* yeoman(基于grunt的在开发,交互细腻,人气旺盛)
* brower(基于nodejs的前端包管理器twiter团队目前在推)
* sass(最早HAML,ruby模版语言的css模块,结果掩盖主产品光芒)
* scss(为了照顾偏向css的FE,sass做的更像css的马甲,兼容css)
* compass(目前最大的css框架解决方案,bootstarp灵感来源于compass)
* stylus(express作者从sass抄袭出来的nodejs版本)
* less(抄袭sass,不过推广的更好)

## 前端包管理器

* jam
* component
* bower

这些工具来自开源世界,紧靠Unix平台,并不同程度地向windows平台发展

##依赖安装

* 安装node(平台)
* 安装express `npm install -g express`(服务器)
* 安装grunt `npm install -g grunt`(编译,合并,压缩)
* 安装git(版本控制工具)
* 安装bower(项目的包管理器)
* 使用JPEGmini lite进行图片压缩,window使用线上版本一天20张足够用了.

至此可以使用目前我做的编译工具,命名为`BAI(白)`.招募组内开发者共同开发.

### YEOMAM
官方说window平台目前支持部分功能,目前正在考察.

### 最近的感受

来百度之后目前是做的第二个项目,第一个项目用了grunt,第二个项目用了apache+php+grunt.

接下来的打算用`(BAI)白`,这还是一个初期的产品,交互的自动化这些没有时间和精力去做,希望他也能随着项目不断成长吧.

大家可能对ruby不熟悉,李光我们在一个公司的时候,我就开始业余玩玩ruby了,nodejs就是第二个ruby(实际上国外好多嗅觉敏锐的ruby社区主力已经转过来了).

