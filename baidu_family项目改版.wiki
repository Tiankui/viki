
# family.baidu.com改版FE工作规划书
######百度BPIT 周伟平
FE项目组成员

* 伟平
* 胜敏
* 承星

`此文档与Family-FE项目TPL一同保存在代码仓库,文档随项目进行不断更新`

-------
兵家有云:`兵马未动,粮草先行.`大型的web项目也是,不光后端需要事先架构思考,前端也是,前期的工作侧重不同,但道理是一样的.


## 目前family的前端问题

* `加载的JS库和插件太多.`用得着的,用不着的,一堆一堆,就不一一细数了,眼晕.
* `css编写随意.`由于family样式单一,现在并不清楚css的继续开发是否已经出现难度,`彭波`同学讲也许是有的.
* `XHR高并发过高,当初也没有非阻滞加载的概念,造成请求阻滞.`首页使用widget模块AJAX自加载,造成请求阻塞.XHR对象也是有同源限制策略的,就是常见的浏览器同源请求数目限制.eg : 首页加载完毕后并发16个XHR请求.
* `静态代码琐碎.`js,css文件未压缩,合并,体积较大.
* `js插件滥用`,存在为了一个功能上一个库的现象,造成JS体积臃肿.
* `单页请求数太高.`都在150+,服务器并发负担比较重.(都是淘宝首页级别的,但淘宝*有最大*的CND,静态资源没有请求数限制,随便用)
* todo

## 改版解决方案
* `只加载一个js库.`(现在线上`jQuery`,`tangram`,`jQueryUI`,`AC97`日历并存的现象估计就是某人为了添加个功能,而且之前的库不熟悉,上的另一套)
* `css命名规范,编写规范.`整理为TPL文档(标准化文档),同前端源代码库一起保存
* `处于性能考虑,按需ajax,或错开时间发请求,避免阻滞,`ajax根据模块需要上,新闻类不适合前端mvc,考虑后期新需求的接入,架构在两者之间做权衡
* `控制jQuery插件的质量`,基于需求分析JS的粒度.
* 静态文件进行合并,压缩.`降低请求数.`包括JS,CSS,IMAGE-ICONS.

###JS框架考察报告

* `tangram`(百度通用组做的js框架),我们组内同学对其积极性不高,考虑到以后维护的问题,这次就不选了.
* `magic_UI`框架(有十个常用组件)代码体积不大,看上去不错,不过十个插件不是都好用,API文档写的也有些简略,新手上手麻烦.网站的下载有问题,下载的压缩包会报错,再考虑吧.
* `BaiduTemplate`,对所有框架无依赖,这次如项目有前端MVC需求可以选用.
* 组件方面,今晚翻译了个`自动完成组件`挂在了github,http://tiankui.github.com/jQuery-Autocomplete/, 质量不错,代码压缩后只有2.7K,非常好的2次开发基础.
* `Require.js` todo

综上考虑框架还是选用`jQuery`,对于插件的选用.精挑细选,不上被有必要的累赘,做好优秀插件的积累和二次开发.组建自己的UI库那是后话,到时水到渠成的事情.

设计图出来之后再详细查看需求.

### 前端选型 (具体到版本)

* jQuery 1.9.0
* requirejs(了解中)
* normalize.css(重置文件,为后期是否做响应式作预备)
* bootstrap栅格(思考中)
* todo

### 依赖安装

* 安装node(平台)
* 安装express `npm install -g express`(服务器)
* 安装grunt `npm install -g grunt`(编译,合并,压缩)
* 安装git(版本控制工具)
* 安装bower(项目的包管理器)
* 使用JPEGmini lite进行图片压缩,window[todo]使用线上版本一天20张足够用了.


至此可以使用这几天我做的前端编译工具(最近我尽量出个可用版本),综合上面说到的本地依赖,实现FE代码的`本地压缩`,`合并`,`stylus(CSS引擎,比less好用)编译`,`前端包管理(很牛逼的概
念)`,`静态服务器`,`具备后台IO`

暂时命名为`BAI(白)`(我觉得这个可以长期做下去,大FE做的FIS(同类工具)实在是云里雾里,也没见
过人用).以后再招募组内开发者共同开发或我独立开发.

---
##与RD的协同的开发方式
`(不熟悉GIT的FE需特别注意)`

* RD暂时需要安装`git`,clone代码用,后期FE服务器弄好,再探讨新的合作方法.
* 使用`持续交付`的开发模式
  * `FE建立个人开发分支`,单个功能集合(`模块化开发`)开发完成后合并(merge)到主干分支(Master)分支,`Master理论上永远只有成熟的代码`
  * `RD只取Mater分支的代码`,进行和页面的工作.
  * 工作分支到主干分支merge工作由专人负责,以往的经验,前期merge容易冲突,暂时不允许随意merge.
  


RD可以直接拿到成熟的代码进行工作,无需等到FE把单页全部完工.FE保持持续交付的`模块化开发工作`状态.`FE开发粒度小`,可控性更好,人的精神压力也小.

(假定是FE这边也有仓库长期保存一个一个版本作为demo.这方便FE团队的代码review和成员成长)

---

##所剩下工作

* 项目流程思考
* js库选型
* css编写规则制定 todo
* css-reset文件确定,需考虑后期响应式的改版 todo
* css字体确定,考虑个平台.如mac todo
* stylus的调研,文档,是否换成less,如何和项目无痛切合 todo
* jQuery组件开发需求或者调研需求(需等设计图确定后) todo
* 编译平台要保证在醒目开始之前可用 todo
* 安装依赖工具的window调研,文档编写,人员指导 todo
* bower的学习,调研,文档,人员指导 todo
* git仓库服务器的搭建(长期活),这次赶不及就直接花钱买个github仓库(没几个钱) todo
* git常用命令总结 todo
* BP-FE组的服务器搭建 todo
* 
